# -*- coding: utf-8 -*-
"""SBU AI Final Project.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd
from google.colab                    import drive
from google.colab                    import files
from sklearn.model_selection         import train_test_split
from sklearn.feature_extraction.text import*
from sklearn                         import preprocessing
from sklearn.preprocessing           import LabelEncoder
from sklearn.ensemble                import RandomForestClassifier
from sklearn.svm                     import LinearSVC
from sklearn.linear_model            import LogisticRegression
from sklearn.metrics                 import accuracy_score

drive.mount('/drive')

dataset = pd.read_csv('/drive/My Drive/Colab Notebooks/SBU AI Project Assets/Datasets.csv')
text = dataset.Text
language = dataset.language
train_features, test_features, train_labels, test_labels = train_test_split(text, language, test_size=0.20, random_state=5)

uni_vector = CountVectorizer( strip_accents='unicode', analyzer='word', token_pattern=r'\w{1,}', stop_words=None, ngram_range=(1,1), max_features=1000)
bag_of_words_uni = uni_vector.fit_transform(train_features)

uni_feature_names = uni_vector.get_feature_names()
uni_train_features = pd.DataFrame(bag_of_words_uni.toarray(), columns=uni_feature_names)

lr_uni = LogisticRegression()                      
lr_uni.fit(uni_train_features, train_labels);

uni_test_features = uni_vector.transform(test_features)
uni_test_features = pd.DataFrame(uni_test_features.toarray(), columns=uni_feature_names)

predictions_uni_lr = lr_uni.predict(uni_test_features)
uni_lr = accuracy_score(test_labels, predictions_uni_lr)

features = uni_vector.transform(dataset.Text)
target=language
model=lr_uni.fit(features, target);

def lang(x):
  user_input= uni_vector.transform([x])
  a=user_input.toarray()
  user_input=pd.DataFrame(a, columns=uni_feature_names)
  language = model.predict(user_input)
  return language[0]

task1 = pd.read_csv('/drive/My Drive/Colab Notebooks/SBU AI Project Assets/task1 - task1 (Judge).csv')
task2 = task1.copy(deep=True)
task1["Id"] = task1["Id"].str.replace('\n', " ")
task2["Category"] = [lang(x) for x in task1["Id"]]
task2.to_csv("AI Final Project Output (Judge).csv", index=False, mode="w+")
files.download('AI Final Project Output (Judge).csv')